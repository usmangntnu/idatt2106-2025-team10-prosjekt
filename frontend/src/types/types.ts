// Type definitions for Emergency Preparedness Application

import type { Geometry } from 'geojson'

/**
 * User interface
 */
export interface User {
  email: string
  username?: string
  firstName: string
  lastName: string
  isHouseholdAdmin: boolean
}

/**
 * User creation request
 */
export interface UserCreate {
  email: string
  password: string
  firstName: string
  lastName: string
  recaptchaToken: string
}

/**
 * User login request
 */
export interface LoginRequest {
  email: string
  password: string
}
/**
 * Household interface
 */
export interface Household {
  id: number
  householdName: string
  address: string
  postalCode: string
  city: string
  latitude?: number
  longitude?: number
  users: User[]
  owner?: User
}

/**
 * Household creation request
 */
export interface HouseholdCreate {
  name: string
  address?: string
  postalCode?: string
  city?: string
  country?: string
  latitude?: number
  longitude?: number
}

/**
 * Category interface
 */
export interface Category {
  id: number
  name: string
}

/**
 * Item Definition interface
 */
/*
export interface ItemDefinition {
  id: number;
  categoryId: number;
  categoryName?: string; // For convenience in the frontend
  name: string;
  unit: string;
  recommendedAmountPerPerson: number;
  shelfLifeDays?: number; // Optional, as some items don't expire
}
 */

/**
 * Storage Item interface for displaying items in household storage
 */
export interface StorageItem {
  id: number
  categoryId: number
  currentStock: number
  expirationDate?: string // ISO date string, optional
  name?: string // For convenience in the frontend
  unit?: string // For convenience in the frontend
  recommendedStockForHousehold?: number // Calculated based on household size
  stockCompletionPercentage?: number // Calculated field
}

/**
 * Interface for updating storage item stock
 */
export interface StorageItemUpdate {
  id: number
  currentStock: number
  expirationDate?: string // ISO date string, optional
}

/**
 * Interface for creating a new storage item
 */
export interface StorageItemCreate {
  householdId: number
  itemDefinitionId: number
  currentStock: number
  expirationDate?: string // ISO date string, optional
}

/**
 * Notification interface
 */
export interface Notification {
  id: number
  householdId: number
  storageItemId?: number
  itemName?: string // For convenience in the frontend
  type: 'EXPIRATION' | 'LOW_STOCK'
  message?: string
}

/**
 * Household Preparedness Summary interface
 */
export interface PreparednessSummary {
  householdId: number
  householdName?: string
  overallScore: number
  totalItems: number
  adequateItems: number
  lowStockItems: number
  expiringItems: number
}

/**
 * MainDashboard Summary interface for the home screen
 */
export interface DashboardSummary {
  preparedness: PreparednessSummary
  recentNotifications: Notification[]
  totalStorageItems: number
}

/**
 * Interface for the position type API request for position types
 */
export interface PositionTypeRequest {
  name: string
  description?: string
}

/**
 * Interface for the position type API response for position types
 */
export interface PositionTypeResponse {
  id: number
  name: string
  description?: string
}

/**
 * Interface for the position API request for shelters
 */
export interface PositionRequest {
  title: string
  description?: string
  longitude: number
  latitude: number
  capacity?: number | null
  typeId: number
}

/**
 * Interface for the position API response for shelters
 */
export interface PositionResponse {
  id: number
  title: string
  description: string
  longitude: number
  latitude: number
  capacity?: number | null
  type: PositionTypeResponse
}

/**
 * Interface for the event API response for eventtypes
 */
export interface EventTypeResponse {
  id: number
  name: string
  description: string
}

/**
 * Interface for the event API request for events
 */
export interface EventRequest {
  title: string
  description?: string
  geometryGeoJson: string
  typeId: number
  status: EventStatus
  startTime: string
  severity: string
  circleData?: CircleDataDto
}

/**
 * Interface for the event API response for events
 */
export interface EventResponse {
  id: number
  title: string
  description: string
  geometryGeoJson: string
  eventType: EventTypeResponse
  severity: string
  startTime: string
  status: EventStatus
  circleData?: CircleDataDto
}

/**
 * Request type for creating a new notification
 * Omits the 'id' field since it's generated by the backend
 */
export type NotificationRequest = Omit<Notification, 'id'>

/**
 * Response type for notification data returned from the API
 */
export type NotificationResponse = Notification

/**
 * Circle data for event
 */
export interface CircleDataDto {
  latitude: number
  longitude: number
  radius: number
}

/**
 * Status of the event
 */
export type EventStatus = 'UPCOMING' | 'ACTIVE' | 'INACTIVE' | 'FINISHED'

/**
 * Crisis level of event
 */
export type CrisisLevel = 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'

/**
 * Reflection note response
 */
export interface ReflectionNote {
  id: number
  title: string
  content: string
  visibility: ReflectionNoteVisibility
  creator: User
  createdAt: string // ISO string
}

/**
 * Reflection note request data
 */
export interface ReflectionNoteCreate {
  title: string
  content: string
  visibility: ReflectionNoteVisibility
}

export type ReflectionNoteVisibility = 'PUBLIC' | 'PRIVATE' | 'HOUSEHOLD'

/**
 * Address suggestion data
 */
export interface AddressSuggestion {
  id: string
  text: string
  latitude: number
  longitude: number
  postalCode: string
  city: string
}
